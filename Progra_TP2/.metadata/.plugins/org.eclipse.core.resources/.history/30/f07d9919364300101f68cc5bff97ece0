package resolucion;

import grafos.*;
//import java.util.*;
import red.*;

public class Resolucion {

	public void main() {
		// Robopuertos
		Robopuerto rp1 = new Robopuerto(0, 0, "RP1");
		Robopuerto rp2 = new Robopuerto(15, 0, "RP2"); // Más cerca

		// Cofres
		Cofre c1 = new Cofre(5, 0, "C1"); // cerca de RP1
		Cofre c2 = new Cofre(0, 7, "C2"); // cerca de RP1
		Cofre c3 = new Cofre(20, 0, "C3"); // cerca de RP2
		Cofre c4 = new Cofre(15, 7, "C4"); // cerca de RP2
		Cofre c5 = new Cofre(8, 0, "C5"); // en medio, dentro de ambos (sin estar en límite)
		Cofre c6 = new Cofre(50, 50, "C6"); // fuera de ambos

		Robopuerto[] robopuertos = { rp1, rp2 };
		Cofre[] cofres = { c1, c2, c3, c4, c5, c6 };

		//Grafo grafo = armado_inicial(robopuertos, cofres);

	}

	public void armado_inicial(Robopuerto[] robopuertos, Cofre[] cofres) {

		return;
	}

	/*
	 * Grafo grafo = new Grafo(false); //No es dirigido, los caminos son doble
	 * sentido
	 * 
	 * for(Robopuerto rp : robopuertos) grafo.addNodo(rp.getNodo());
	 * 
	 * for(Cofre cofre : cofres) grafo.addNodo(cofre.getNodo());
	 * 
	 * 
	 * for(Robopuerto rp : robopuertos) { for(Cofre cofre : cofres) { Coordenada
	 * coord_cofre = cofre.getCoordenada(); Coordenada coord_rp =
	 * rp.getCoordenada();
	 * 
	 * double distancia = Coordenada.distancia(coord_cofre, coord_rp);
	 * 
	 * if(distancia < rp.getRadio()) { Nodo nodo_cofre = cofre.getNodo(); Nodo
	 * nodo_rp = rp.getNodo(); grafo.addArista(nodo_cofre, nodo_rp, distancia);
	 * 
	 * if(distancia < cofre.getDistanciaRP_minima()) { cofre.setRp_mas_cercano(rp,
	 * distancia); } //Como no es dirigido, tambien se agrega el inverso. } }
	 */

//Fin
}
