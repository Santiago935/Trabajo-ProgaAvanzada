package grafos;

import java.util.*;
import grafos.*;
import cola_de_prioridad.*;


public class AlgoritmosGrafos {
	public static class Dijkstra_resultado{
		private final Map<Integer,Double> costos_minimos; 
		private final Map<Integer, Integer> predecesores;
		
		public Dijkstra_resultado(Map<Integer,Integer> costos_minimos, Map<Integer, Integer> predecesores)
		{
			this.costos_minimos = costos_minimos;
			this.predecesores = predecesores;
		}		
		
		public static void imprimirDijkstraResultado(Dijkstra_resultado resultado) {
		    System.out.println("Costos m√≠nimos desde el nodo origen:");
		    for (Map.Entry<Integer, Integer> entry : resultado.costos_minimos.entrySet()) {
		        System.out.println("Nodo " + entry.getKey() + ": " + entry.getValue());
		    }

		    System.out.println("\nPredecesores:");
		    for (Map.Entry<Integer, Integer> entry : resultado.predecesores.entrySet()) {
		        System.out.println("Nodo " + entry.getKey() + " <- " + entry.getValue());
		    }
		}

	}
	
	
	public static Dijkstra_resultado dijkstra(Grafo grafo, Nodo inicio)
	{
        // Mapas para costos, visitados y padres
		Map<Integer, Integer> costos = new HashMap<Integer, Integer>();
		Map<Integer, Boolean> visitados = new HashMap<>();
		Map<Integer, Integer> padre = new HashMap<>();

	    //Cola de prioridad basada en el costo acumulado
		TDA.Cola_prioridad_heap<NodoCosto> cola = new TDA.Cola_prioridad_heap<>();
		
		Set<Nodo> nodos = grafo.getNodos();
		
		//Inicializacion
		for(Nodo nodo : nodos)
		{
			costos.put(nodo.getId(), Integer.MAX_VALUE);
			visitados.put(nodo.getId(), false);
			padre.put(nodo.getId(), null);
		}
	
		//Agrego el nodo inicial
		costos.put(inicio.getId(), 0); //Sobreescribo el infinito por 0
		cola.encolar(new NodoCosto(inicio, 0));
		
		while(!cola.estaVacia())
		{
			//Extraemos el nodo con menor costo de ser alcanzado
			NodoCosto actual = cola.desencolar();
			int actual_id = actual.nodo.getId();
			
			if(!visitados.get(actual_id))
			{
				visitados.put(actual_id, true); //Si no estaba visitado, lo marco como visitado
			}
			
			//Para cada vecino del actual (w), si no fue visitado antes (no pertenece a V-S)
			//Recorro todos sus vecinos para ver si tengo forma de mejorar su distancia
            for (Arista arista : grafo.getAristas_deNodo(actual.nodo)) {
                Nodo vecino = arista.getObjetivo();
                int vecino_id = vecino.getId();
                int peso_vecino = arista.getPeso();

                
                // Si no estaba visitado, y si D[actual(w)] + C(w,vecino) es < D[vecino)
                //Significa que la nueva distancia es mejor
                if (!visitados.get(vecino_id) && 
                		costos.get(vecino_id) > costos.get(actual_id) + peso_vecino) {
                    costos.put(vecino_id, costos.get(actual_id) + peso_vecino);
                    padre.put(vecino_id, actual_id); //Al vecino ahora llego desde el actual
                    cola.encolar(new NodoCosto(vecino, costos.get(vecino_id)));
                }
            }
		}
		Dijkstra_resultado resultado = new Dijkstra_resultado(costos, padre);
		
		return resultado;
	}
	
    // Clase auxiliar para manejar el nodo y el costo acumulado en la cola de prioridad
    static class NodoCosto implements Comparable<NodoCosto>{
        Nodo nodo;
        int costo;

        NodoCosto(Nodo nodo, int costo) {
            this.nodo = nodo;
            this.costo = costo;
        }
        
        public int compareTo(NodoCosto otro) {
            // Queremos que la cola tenga menor costo arriba
            return Integer.compare(this.costo, otro.costo);
        }
    }
}
