package resolucion;

import grafos.*;
import java.util.*;
import red.*;

public class Resolucion {

	public void main() {
		// Robopuertos
		Robopuerto rp1 = new Robopuerto(0, 0, "RP1");
		Robopuerto rp2 = new Robopuerto(15, 0, "RP2"); // Más cerca

		// Cofres
		Cofre c1 = new Cofre(5, 0, "C1"); // cerca de RP1
		Cofre c2 = new Cofre(0, 7, "C2"); // cerca de RP1
		Cofre c3 = new Cofre(20, 0, "C3"); // cerca de RP2
		Cofre c4 = new Cofre(15, 7, "C4"); // cerca de RP2
		Cofre c5 = new Cofre(8, 0, "C5"); // en medio, dentro de ambos (sin estar en límite)
		Cofre c6 = new Cofre(50, 50, "C6"); // fuera de ambos

		Robopuerto[] robopuertos = { rp1, rp2 };
		Cofre[] cofres = { c1, c2, c3, c4, c5, c6 };

		// Grafo grafo = armado_inicial(robopuertos, cofres);
		ArrayList<Red> redes = armado_inicial(robopuertos, cofres);
		
		for(Red red : redes)
		{
			System.out.println(red);
		}
		

	}

	public ArrayList<Red> armado_inicial(Robopuerto[] robopuertos, Cofre[] cofres) {

		ArrayList<Red> lista_redes = new ArrayList<Red>();
		int i = 1;

		for (Robopuerto rb : robopuertos) {
			boolean flag_solapado = false;
			for (Red red_actual : lista_redes) {
				for (Robopuerto rb_red : red_actual.getRobopuertos()) {
					if (radios_solapados(rb, rb_red) == true) {
						red_actual.add_robopuerto(rb);
						flag_solapado = true;
						break;
					}
				}
				if (flag_solapado) // Si le encontre red, no sigo buscando en otras redes
					break;
			}
			if (!flag_solapado) // Si no le encontré red o es primero->nueva red
			{
				Red nueva_red = new Red("Red: " + (i++));
				nueva_red.add_robopuerto(rb);
				lista_redes.add(nueva_red);
			}
		}

		return lista_redes;
	}

	public boolean radios_solapados(Robopuerto rb1, Robopuerto rb2) {
		Coordenada coord1 = rb1.getCoordenada();
		Coordenada coord2 = rb2.getCoordenada();

		double radio1 = rb1.getRadio();
		double radio2 = rb2.getRadio();

		if (Coordenada.distancia_eucladiana(coord1, coord2) < radio1 + radio2)
			return true;
		return false;
	}

//Fin
}
